#tag ClassProtected Class RegCode	#tag Method, Flags = &h0		Function Generate(identifier As String, version As String, name As String) As String		  Dim regCode As String		  		  regCode = identifier + version + name		  		  regCode = ConvertEncoding(regCode, Encodings.UTF8)		  		  Return RegistrationKey(MD5(regCode))		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function RegistrationKey(md5Hash As String) As String		  Dim i As Integer		  Dim l As Integer		  Dim Result As String		  Dim m As MemoryBlock		  Dim theCh As String		  Dim temp As Integer, temp2 As Integer		  		  // Md5Hash = ConvertEncoding(Md5Hash, Encodings.MacRoman)		  		  // Scan through all the bytes.		  l = LenB(md5hash)		  		  // make sure no junk in here!		  Result = ""		  		  // Create one to begin with... (otherwise, a NilObjectException will in your future appear, young Jedi!)		  m = New MemoryBlock(4)		  m.LittleEndian = False		  		  For i = 1 To l		    theCh = MidB(md5hash, i, 1)		    temp = i Mod 4		    Select Case temp		    Case 0		      m.Byte(3) = AscB(theCh)		      		      // We've assembled 4 bytes into the memoryblock, time to retrieve them.		      temp2 = m.Long(0)		      If (result = "") Then		        result = result + Hex(temp2)		      Else		        result = result + "-" + Hex(temp2)		      End If		      		      // All new memoryblock		      m = New MemoryBlock(4)		      m.LittleEndian = False		    Else		      // Store this byte		      m.Byte(temp-1) = AscB(theCh)		    End Select		  Next		  		  // Account for the For-Next exit value.		  temp = (i - 1) Mod 4		  		  // See if we left any bytes hanging (unhandled by the For-Next loop above.)		  If (temp <> 0) Then		    For i = temp+1 To 4		      temp = i Mod 4		      Select Case temp		      Case 0		        m.Byte(3) = 0		        		        // We've assembled 4 bytes into the memoryblock, time to retrieve them.		        temp2 = m.Long(0)		        If (result = "") Then		          result = result + Hex(temp2)		        Else		          result = result + "-" + Hex(temp2)		        End If		      Else		        // Store this byte		        m.Byte(temp-1) = 0		      End Select		    Next		  End If		  		  // We don't need this anymore.		  m = Nil		  Return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Validate(code As String, identifier As String, version As String, name As String) As Boolean		  // Return TRUE if the code is good and FALSE if		  // it is not good.		  Dim calcCode As String		  		  calcCode = Generate(identifier, version, name)		  		  If calcCode <> "" Then		    If calcCode = code Then		      Return True		    End if		  End If		  		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Shared Function Version() As String		  Return "1.3.1"		End Function	#tag EndMethod	#tag Note, Name = Usage Instructions		Add RegCode to your project and call the validation method to test the		entered code.				RegCode.Validate(code As String, identifier As String, version As String, Name As String) Returns Boolean				where				code: the registration code entered by the user		identifier: the identifier used to generate the code		version: the version/salt used to generate the code		name: the name of the user				These values must all match what was entered to generate the code.				Returns True if the code is valid		Returns False if the code is not valid	#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass